+ mvc(model view control)

 MVC Pattern

 - JSP (디자인, 로직, 흐름) : 한 페이지에 들어있음 (Model1 방식)
 
 - 프로젝트가 엔터프라이즈 급으로 커진다면?
 
 1. 화면 : JSP						==> View
 2. DB 연결, 데이터 조작(연산) : JAVA		==> Model
 3. 데이터 흐름 : Servlet				==> Control
 
 - 이런 방식을 MVC Pattern 또는 Model2 방식
 - 유지, 보수가 훨씬 용이
 - 개발은 더 번거롭다.
 
 
+ Servlet : 웹에서 동작하는 작은 자바 프로그램
 
 서블릿 생성 방법
 1. HttpServlet 상속
 2. do~ method overide => 필요한 로직을 작성
 
 	- doGET() : Request-URI로 지정한 자원에 대해 요청 (default)
 	- doPOST() : Request BODY에 데이터를 담아서 서버로 전송하면서 요청
 	
 	- doHEAD() : GET 방식과 동일하나 서버의 응답시 Response Header만을 전송
 	- doPUT()  : Request BODY의 내용을 Request-URI로 지정한 곳에 저장
 	- doDELETE() : Request-URI로 지정한 자원을 삭제하도록 요청
 	- doOPTIONS() : 서버가 제공하는 통신옵션에 대한 정보를 요청
 	- doTrace() : 요청 메세지가 거쳐가는 경로에 대한 정보를 요청
 	
 
 3. WebServlet annotation => 주소를 매칭


 서블릿을 작성하는 방법 - 2
 1. GenericServlet 상속
 2. service(~req, ~resp) override => 필요한 로직을 작성
 3. @WebServlet 주소 지정]

=================================================================================
+ ServletRequest | HttpServletRequest
> ServletRequest
 - 클라이언트 요청과 관련된 다양한 정보를 제공하는 객체
 - Servlet service()의 첫번째 매개변수
 - 클라이언트 정보를 추출할 수 있도록 하는 중요한 역할
 
> HttpServletRequest
 - ServletRequset를 상속하여 HTTP 프로토콜 기반의 요철 정보를 추가로 제공하는 객체
 - 요청 방식, query문자열, 다양한 요청 헤더 정보 등등 HTTP 프로토콜 스펙에서 제시하고 있는 다양한 요청 정보들을 추출할 수 있음
 - HTTP 기반의 Servlet 구현 시 클라이언트 정보를 추출할 수 있도록 하는 중요한 역할
 - InputStream 객체를 추출하여 클라이언트로부터 전송되어지는 데이터를 직접 읽을 수 있음
 
> HttpServletResponse
 - ServletResponse를 상속하여 HTTP 프로토콜 기반의 응답 정보 처리 목적으로 제공하는 객체
 - 응답 헤더 설정
 - 쿠키 설정, 세션 설정
 - 응답 결과 출력
 - OutputStream 객체를 추출하여 클라이언트로부터 전송되어지는 데이터를 직접 출력할 수 있음





































